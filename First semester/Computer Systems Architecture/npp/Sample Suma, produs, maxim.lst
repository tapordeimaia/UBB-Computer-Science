     1                                  bits 32
     2                                  global start
     3                                  extern exit, printf, fread, fopen, fclose, fscanf
     4                                  import exit msvcrt.dll
     5                                  import printf msvcrt.dll
     6                                  import fopen msvcrt.dll
     7                                  import fread msvcrt.dll
     8                                  import fclose msvcrt.dll
     9                                  import fscanf msvcrt.dll
    10                                  
    11                                  segment data use32 class=data
    12 00000000 4E7220636974697420-         print_message db "Nr citit este = %d", 10, 0
    12 00000009 65737465203D202564-
    12 00000012 0A00               
    13 00000014 6E756D626572735F6C-         input_file db "numbers_list.txt", 0
    13 0000001D 6973742E74787400   
    14 00000025 7200                        read_mode db "r", 0
    15 00000027 25640A00                    format db "%d", 10, 0
    16 0000002B 73756D203D2025642C-         output_format db "sum = %d, product = %d, max = %d", 0
    16 00000034 2070726F6475637420-
    16 0000003D 3D2025642C206D6178-
    16 00000046 203D20256400       
    17 0000004C 6F75747075742E7478-         output_file db "output.txt", 0
    17 00000055 7400               
    18 00000057 7700                        write_mode db "w", 0
    19 00000059 00000000                    file_descriptor dd 0
    20 0000005D 00000000                    buffer dd 0
    21 00000061 <res 00000190>              numbers_list resd 100
    22 000001F1 00000000                    index dd 0
    23 000001F5 00                          counter db 0
    24 000001F6 00                          iterator db 0
    25 000001F7 00000000                    sum dd 0
    26 000001FB 01000000                    product dd 1
    27 000001FF 00000000                    max dd 0
    28                                      
    29                                      
    30                                      
    31                                  segment code use32 class=code
    32                                      start:
    33                                          ; eax = fopen(file_name, access_mode)
    34 00000000 68[25000000]                    push dword read_mode
    35 00000005 68[14000000]                    push dword input_file
    36 0000000A FF15[00000000]                  call [fopen]
    37 00000010 83C408                          add esp, 4*2
    38                                          
    39 00000013 A3[59000000]                    mov [file_descriptor], eax
    40                                          
    41 00000018 83F800                          cmp eax, 0
    42 0000001B 0F849F000000                    je final
    43                                  
    44 00000021 BE[61000000]                    mov esi, numbers_list
    45                                          
    46                                          read_loop:
    47                                              ; eax = fscanf(file_descriptor, read_format, buffer)
    48 00000026 68[5D000000]                        push dword buffer
    49 0000002B 68[27000000]                        push dword format
    50 00000030 FF35[59000000]                      push dword [file_descriptor]
    51 00000036 FF15[00000000]                      call [fscanf]
    52 0000003C 83C40C                              add esp, 4*3
    53                                              
    54 0000003F 83F801                              cmp eax, 1
    55 00000042 751E                                jne end_read
    56                                              
    57 00000044 A1[5D000000]                        mov eax, [buffer]
    58 00000049 8B15[F1010000]                      mov edx, [index]
    59 0000004F 890416                              mov [esi+edx], eax
    60 00000052 8305[F1010000]04                    add dword [index], 4
    61 00000059 8005[F5010000]01                    add byte [counter], 1
    62                                              
    63 00000060 EBC4                                jmp read_loop
    64                                             
    65                                          end_read:
    66                                          
    67 00000062 FF35[59000000]                  push dword [file_descriptor]
    68 00000068 FF15[00000000]                      call [fclose]
    69 0000006E 83C404                              add esp, 4
    70                                              
    71 00000071 BE[61000000]                    mov esi, numbers_list
    72                                          
    73 00000076 C705[F1010000]0000-             mov dword [index], 0
    73 0000007E 0000               
    74                                          iterate:
    75 00000080 8A1D[F6010000]                      mov bl, byte [iterator]
    76 00000086 3A1D[F5010000]                      cmp bl, [counter]
    77 0000008C 7432                                je final
    78                                              
    79 0000008E AD                                  lodsd
    80                                              
    81                                              ;push eax
    82                                              ;push dword format
    83                                              ;call [printf]
    84                                              ;add esp, 4*2
    85                                              
    86 0000008F 3B05[FF010000]                      cmp eax, [max]
    87 00000095 7605                                jbe not_max
    88 00000097 A3[FF010000]                            mov [max], eax
    89                                              not_max:
    90                                              
    91 0000009C 0105[F7010000]                      add dword [sum], eax
    92                                              
    93 000000A2 8B1D[FB010000]                      mov ebx, [product]
    94 000000A8 93                                  xchg eax, ebx
    95 000000A9 F7E3                                mul ebx
    96 000000AB A3[FB010000]                        mov [product], eax
    97                                              
    98 000000B0 8305[F1010000]04                    add dword [index], 4
    99 000000B7 8005[F6010000]01                    add byte [iterator], 1
   100                                              
   101 000000BE EBC0                                jmp iterate
   102                                          
   103                                          final:
   104                                          
   105 000000C0 FF35[FF010000]                  push dword [max]
   106 000000C6 FF35[FB010000]                  push dword [product]
   107 000000CC FF35[F7010000]                  push dword [sum]
   108 000000D2 68[2B000000]                    push dword output_format
   109 000000D7 FF15[00000000]                  call [printf]
   110 000000DD 83C410                          add esp, 4*4
   111                                          
   112 000000E0 6A00                            push dword 0
   113 000000E2 FF15[00000000]                  call    [exit]
