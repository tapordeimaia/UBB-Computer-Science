     1                                  ; Read from the keyboard a string of numbers, given in the base 10 as signed numbers (a string of characters is read from the keyboard and a string of numbers must be stored in the memory).
     2                                  
     3                                  bits 32
     4                                  
     5                                  extern scanf
     6                                  import scanf msvcrt.dll
     7                                  
     8                                  global read_input, parse_numbers
     9                                  
    10                                  segment data public data use32
    11 00000000 2539395B5E5C6E5D00          format db "%99[^\n]", 0       ; Format for reading a line of input
    12                                  
    13                                  segment code public code use32
    14                                  
    15                                  ; Function: read_input
    16                                  read_input:
    17 00000000 55                          push ebp
    18 00000001 89E5                        mov ebp, esp
    19 00000003 68[00000000]                push dword format        ; Push the format string ("%99[^\n]")
    20 00000008 FF7508                      push dword [ebp + 8]     ; Push the buffer address (argument from caller)
    21 0000000B FF15[00000000]              call [scanf]             ; Call scanf
    22 00000011 83C408                      add esp, 8               ; Clean up the stack (2 arguments)
    23 00000014 89EC                        mov esp, ebp
    24 00000016 5D                          pop ebp
    25 00000017 C3                          ret
    26                                  
    27                                  ; Function: parse_numbers
    28                                  parse_numbers:
    29                                  
    30 00000018 31DB                        xor ebx, ebx              ; Counter for numbers (EBX = 0)
    31 0000001A 31F6                        xor esi, esi              ; Temporary variable for current number
    32 0000001C 31C0                        xor eax, eax              ; Clear EAX (used for digit processing)
    33 0000001E C60700                      mov byte [edi], 0         ; Initialize num_count to 0
    34                                  
    35                                  parse_loop:
    36 00000021 8A01                        mov al, [ecx]             ; Load current character
    37 00000023 3C00                        cmp al, 0                 ; Check for end of string
    38 00000025 7449                        je parse_done             ; If null-terminator, finish parsing
    39                                  
    40 00000027 3C20                        cmp al, 32                ; Check for space (ASCII: 32)
    41 00000029 742A                        je save_number            ; If space, save the current number
    42                                  
    43 0000002B 3C2D                        cmp al, '-'               ; Check for minus sign
    44 0000002D 750B                        jne check_digit           ; If not a minus sign, check if it's a digit
    45 0000002F 85F6                        test esi, esi             ; Check if we are already parsing a number
    46 00000031 751F                        jnz next_char             ; Ignore '-' in the middle of a number
    47 00000033 BEFFFFFFFF                  mov esi, -1               ; Mark the number as negative
    48 00000038 EB18                        jmp next_char
    49                                  
    50                                  check_digit:
    51 0000003A 2C30                        sub al, '0'               ; Convert ASCII to a digit (0-9)
    52 0000003C 3C09                        cmp al, 9
    53 0000003E 772D                        ja invalid_char           ; Ignore invalid characters
    54 00000040 85F6                        test esi, esi             ; Check if we're starting a new number
    55 00000042 7407                        jz start_number           ; If no number is being parsed, start one
    56                                  
    57 00000044 6BDB0A                      imul ebx, ebx, 10         ; Multiply current number by 10
    58 00000047 01C3                        add ebx, eax              ; Add the digit to the current number
    59 00000049 EB07                        jmp next_char
    60                                  
    61                                  start_number:
    62 0000004B 89C3                        mov ebx, eax              ; Start a new number with the current digit
    63 0000004D BE01000000                  mov esi, 1                ; Mark number as positive (default)
    64                                  
    65                                  next_char:
    66 00000052 41                          inc ecx                   ; Move to the next character
    67 00000053 EBCC                        jmp parse_loop
    68                                  
    69                                  save_number:
    70 00000055 85F6                        test esi, esi             ; Check if a number is being parsed
    71 00000057 7411                        jz skip_save              ; If not, skip saving
    72 00000059 85F6                        test esi, esi             ; Check if the number is negative
    73 0000005B 7F02                        jg save_positive
    74 0000005D F7DB                        neg ebx                   ; If negative, negate the number
    75                                  
    76                                  save_positive:
    77 0000005F 891A                        mov [edx], ebx            ; Save the current number to the numbers array
    78 00000061 83C204                      add edx, 4                ; Move to the next position in the array
    79 00000064 FE07                        inc byte [edi]            ; Increment the number count
    80 00000066 31DB                        xor ebx, ebx              ; Reset current number
    81 00000068 31F6                        xor esi, esi              ; Reset sign flag
    82                                  skip_save:
    83 0000006A 41                          inc ecx                   ; Skip the space
    84 0000006B EBB4                        jmp parse_loop
    85                                  
    86                                  invalid_char:
    87 0000006D 41                          inc ecx                   ; Ignore invalid characters
    88 0000006E EBB1                        jmp parse_loop
    89                                  
    90                                  parse_done:
    91 00000070 85F6                        test esi, esi             ; Check if there's a number left to save
    92 00000072 7402                        jz parse_exit             ; If not, exit
    93 00000074 EBDF                        jmp save_number           ; Save the last number
    94                                  
    95                                  parse_exit:
    96                                  mov dword[numbers], dword[edx]
    96          ******************       error: symbol `numbers' undefined
    97                                  mov dword[num_count], dword[edi]
    97          ******************       error: symbol `num_count' undefined
    98 00000076 C3                          ret
    99                                  
   100                                  
   101                                      
   102                                          
   103                                          
   104                                          
   105                                               
   106                                          
   107                                              
   108                                              
   109                                          
   110                                          
   111                                          
   112                                      
   113                                  
   114                                          
   115                                          
   116                                          
