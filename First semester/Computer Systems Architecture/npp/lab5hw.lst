     1                                  ;Given a character string S, obtain the string D containing all special characters (!@#$%^&*) of the string S.
     2                                  bits 32 ; assembling for the 32 bits architecture
     3                                  
     4                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     5                                  global start        
     6                                  
     7                                  ; declare external functions needed by our program
     8                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     9                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    10                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    11                                  
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14 00000000 2B3432614033242A            s db '+', '4', '2', 'a', '@', '3', '$', '*'
    15                                      l equ $-s
    16 00000008 00<rept>                    d times l db 0
    17 00000010 21402324255E262A            specialChars db "!@#$%^&*"
    18                                      charLen equ $-specialChars
    19                                  segment code use32 class=code
    20                                      start:
    21 00000000 BE[00000000]                    mov  esi, s
    22 00000005 BF[08000000]                    mov edi, d
    23 0000000A B908000000                      mov ecx, l
    24 0000000F E321                            jecxz end_loop      
    25                                          next_char:
    26 00000011 8A06                                mov AL, [esi] 
    27 00000013 BB[10000000]                        mov ebx, specialChars
    28 00000018 BA08000000                          mov edx, charLen          
    29                                          check_special:
    30 0000001D 8A23                                mov AH, byte[ebx]
    31 0000001F 38E0                                cmp AL, AH
    32 00000021 7409                                je is_special
    33 00000023 43                                  inc ebx ; Go to next character in string
    34 00000024 4A                                  dec edx
    35 00000025 83FA00                              cmp edx, 0
    36 00000028 7405                                jz next_iteration
    37 0000002A EBF1                                jmp check_special          
    38                                          is_special:
    39 0000002C 8807                                mov byte[edi], AL
    40 0000002E 47                                  inc edi  
    41                                          next_iteration:
    42 0000002F 46                                  inc esi        
    43 00000030 E2DF                                loop next_char
    44                                          end_loop:
    45                                              
    46                                          
    47 00000032 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    48 00000034 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
