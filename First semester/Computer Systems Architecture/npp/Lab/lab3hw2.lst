     1                                  ;2/(a+b*c-9)+e-d
     2                                  ; a,b,c-byte; d-doubleword; e-qword
     3                                  ;signed
     4                                  bits 32 ; assembling for the 32 bits architecture
     5                                  
     6                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     7                                  global start        
     8                                  
     9                                  ; declare external functions needed by our program
    10                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    11                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    12                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16 00000000 05                          a db 5
    17 00000001 09                          b db 9
    18 00000002 08                          c db 8
    19 00000003 3B000000                    d dd 59
    20 00000007 4602000000000000            e dq 582
    21                                  segment code use32 class=code
    22                                      start: ; 2/(a+b*c-9)+e-d
    23                                          ;b*c (byte*byte)
    24 00000000 A0[01000000]                    mov AL, [b]
    25 00000005 F62D[02000000]                  imul byte[c] ; AX=AL*c=b*c=72
    26 0000000B 6689C3                          mov BX, AX ; BX=b*c
    27                                          
    28                                          ;a+b*c (byte+word)
    29 0000000E A0[00000000]                    mov AL, [a]
    30 00000013 6698                            cbw ; AX=a
    31 00000015 6601D8                          add AX, BX ; AX=AX+BX=a+b*c=77
    32                                          
    33                                          ;a+b*c-9 (word-constant)
    34 00000018 6683E809                        sub AX, 9 ; AX=AX-9=a+b*c-9=68
    35 0000001C 6689C3                          mov BX, AX ; BX=a+b*c-9
    36                                          
    37                                          ;2/(a+b*c-9) (constant/word)
    38 0000001F 66B80200                        mov AX, 2
    39 00000023 6699                            cwd ; DX:AX=2
    40 00000025 66F7FB                          idiv BX ; AX=DX:AX/BX=0 ; DX=DX:AX%BX=2
    41                                          
    42                                          ;2/(a+b*c-9)+e (word+quadword)
    43 00000028 98                              cwde
    44 00000029 99                              cdq ; EDX:EAX = 2/(a+b*c-9)
    45 0000002A 8B0D[07000000]                  mov ECX, dword[e]
    46 00000030 8B1D[0B000000]                  mov EBX, dword[e+4] ; EBX:ECX=e
    47 00000036 01C1                            add ECX, EAX ; ECX=ECX+EAX and set CF to 0 or 1
    48 00000038 11D3                            adc EBX, EDX ; EBX=EBX+EDX+C ; EBX:ECX=2/(a+b*c-9)+e=582
    49                                          
    50                                          ; 2/(a+b*c-9)+e-d (quadword-doubleword)
    51 0000003A 66A1[03000000]                  mov AX, word[d]
    52 00000040 668B15[07000000]                mov DX, word[d+4]
    53 00000047 6652                            push DX
    54 00000049 6650                            push AX
    55 0000004B 58                              pop EAX
    56 0000004C 99                              cdq ; EDX:EAX=d
    57 0000004D 29C1                            sub ECX, EAX ; ECX=ECX-EAX and set CF to 0 or 1
    58 0000004F 19D3                            sbb EBX, EDX ; EBX=EBX-EDX-CF ; EBX:ECX=e-d=523
    59                                          
    60 00000051 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    61 00000053 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
