     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  
     7                                  ; declaring extern functions used in the program
     8                                  extern exit, printf, scanf            
     9                                  import exit msvcrt.dll     
    10                                  import printf msvcrt.dll     ; indicating to the assembler that the printf fct can be found in the msvcrt.dll library
    11                                  import scanf msvcrt.dll      ; similar for scanf
    12                                  
    13                                  ; declare external functions needed by our program
    14                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    15                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    16                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    17                                  
    18                                  ; our data is declared here (the variables needed by our program)
    19                                  segment data use32 class=data
    20 00000000 0A040803020B                sir db 10, 4, 8, 3, 2, 11 ; unsigned numbers
    21                                      ls equ $-sir
    22 00000006 256400                      msg db "%d", 0
    23                                  segment code use32 class=code
    24                                      start:
    25 00000000 B906000000                      mov ecx, ls
    26 00000005 BE[00000000]                    mov esi, sir
    27 0000000A E319                            jecxz end_loop
    28                                          repeat:
    29                                              
    30 0000000C B800000000                          mov eax, 0
    31 00000011 AC                                  lodsb ;al=sir(i) and esi += 1
    32                                              
    33 00000012 60                                  pushad
    34                                              
    35                                              ;printf(msg, sir(i))
    36 00000013 50                                  push dword eax
    37 00000014 68[06000000]                        push dword msg
    38 00000019 FF15[00000000]                      call [printf]
    39 0000001F 83C408                              add esp, 4*2
    40                                              
    41 00000022 61                                  popad
    42                                              
    43 00000023 E2E7                            loop repeat
    44                                          end_loop:
    45 00000025 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    46 00000027 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
