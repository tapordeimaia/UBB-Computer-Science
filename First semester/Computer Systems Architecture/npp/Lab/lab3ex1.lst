     1                                  ; Write a program in assembly language which computes one of the following arithmetic expressions, considering the following domains for the variables: 
     2                                  ; a - doubleword; b, d - byte; c - word; e - qword
     3                                  ; a + b / c - d * 2 - e (unsigned)
     4                                  bits 32 ; assembling for the 32 bits architecture
     5                                  
     6                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     7                                  global start        
     8                                  
     9                                  ; declare external functions needed by our program
    10                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    11                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    12                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16 00000000 64000000                    a dd 100
    17 00000004 0A                          b db 10
    18 00000005 05                          d db 5
    19 00000006 0200                        c dw 2
    20 00000008 3200000000000000            e dq 50
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ; b from byte to DX:AX
    24 00000000 A0[04000000]                    mov AL, [b]
    25 00000005 B400                            mov AH, 0 ; AX=b
    26 00000007 66BA0000                        mov DX, 0 ; DX:AX = b
    27                                          ;b/c
    28 0000000B 66F735[06000000]                div word[c]; AX = b/c 
    29                                          ; AX -> EBX
    30 00000012 BB00000000                      mov EBX, 0
    31 00000017 6689C3                          mov BX, AX ; EBX = AX = b/c
    32                                          ;a+b/c
    33 0000001A A1[00000000]                    mov EAX, [a]
    34 0000001F 01D8                            add EAX, EBX ; EAX = a+b/c
    35 00000021 89C3                            mov EBX, EAX ; EBX = a+b/c
    36 00000023 B002                            mov AL, 2
    37 00000025 F625[05000000]                  mul byte [d]; AX=d*2
    38                                          ; AX tp DX:AX then EAX using stack
    39 0000002B 66BA0000                        mov DX, 0
    40 0000002F 6652                            push DX
    41 00000031 6650                            push AX
    42 00000033 58                              pop EAX ; EAX = d*2
    43 00000034 29C3                            sub EBX, EAX; EBX = a+b/c-d*2
    44                                          ;EBX - e(quad)
    45 00000036 B900000000                      mov ECX, 0 ; ECX:EBX = a+b/c-d*2
    46                                          ; e in EDX:EAX
    47 0000003B A1[08000000]                    mov EAX, dword [e]
    48 00000040 8B15[0C000000]                  mov EDX, dword [e+4] ; EDX:EAX = e
    49                                          ;ECX:EBX - EDX:EAX
    50 00000046 29C3                            sub EBX, EAX ; EBX = EBX-EAX and set CF to 0 or 1
    51 00000048 19D1                            sbb ECX, EDX ; ECX = ECX-EDX-CF
    52                                          ; final result is in ECX:EBX
    53 0000004A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    54 0000004C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
