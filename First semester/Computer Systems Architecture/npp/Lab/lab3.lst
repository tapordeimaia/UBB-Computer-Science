     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 CDAB221178563412            a dq 123456781122ABCDh
    14 00000008 11AAEDFF34200000            b dq 2034FFEDAA11h
    15 00000010 0A000000                    c dd 10
    16 00000014 14000000                    d dd 20
    17                                  segment code use32 class=code
    18                                      start:
    19                                          ;a+b
    20                                          ;a in EDX:EAX
    21 00000000 A1[00000000]                    mov EAX, dword [a] ; EAX = 11 22 AB CD
    22 00000005 8B15[04000000]                  mov EDX, dword [a+4] ; EDX = 12 34 56 78
    23                                          ;b in EBX:ECX
    24 0000000B 8B0D[08000000]                  mov ECX, dword [b] ; ECX = FF ED AA 11
    25 00000011 8B1D[0C000000]                  mov EBX, dword [b+4]
    26                                          ; a+b; add lower parts of number; keep result in EDX:EAX
    27 00000017 01C8                            add EAX, ECX ; EAX = EAX + ECX and result sets carry flag to 0 or 1
    28 00000019 11DA                            adc EDX, EBX ; EDX = EDX + EBX + CF
    29                                          ; EDX:EAX contains a+b
    30                                          ;c-d
    31                                          ; c in DX:AX
    32 0000001B 66A1[10000000]                  mov AX, word [c]
    33 00000021 668B15[12000000]                mov DX, word [c+2]
    34                                          ;d in BX:CX
    35 00000028 668B0D[14000000]                mov CX, word [d]
    36 0000002F 668B1D[16000000]                mov BX, word [d+2]
    37                                          ;c-d
    38 00000036 6629C8                          sub AX, CX ; AX = AX-CX ; set carry flag to 0 or 1
    39 00000039 6619C2                          sbb DX, AX ; DX = DX-BX-CF
    40 0000003C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    41 0000003E FF15[00000000]                  call    [exit]       ; call exit to terminate the program
