     1                                  ; Read two numbers a and b (in base 10) from the keyboard and calculate a/b. This value will be stored in a variable called "result" (defined in the data segment). The values are considered in signed representation.
     2                                  bits 32 ; assembling for the 32 bits architecture
     3                                  
     4                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     5                                  global start 
     6                                  
     7                                  ; declaring extern functions used in the program
     8                                  extern exit, printf, scanf            
     9                                  import exit msvcrt.dll     
    10                                  import printf msvcrt.dll     ; indicating to the assembler that the printf fct can be found in the msvcrt.dll library
    11                                  import scanf msvcrt.dll      ; similar for scanf       
    12                                  
    13                                  ; declare external functions needed by our program
    14                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    15                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    16                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    17                                  
    18                                  ; our data is declared here (the variables needed by our program)
    19                                  segment data use32 class=data
    20 00000000 00000000                    a dd 0
    21 00000004 00000000                    b dd 0
    22 00000008 256400                      format db "%d", 0
    23 0000000B 54686520726573756C-         msg1 db "The result of the division is: %d", 0
    23 00000014 74206F662074686520-
    23 0000001D 6469766973696F6E20-
    23 00000026 69733A20256400     
    24 0000002D 00000000                    result dd 0
    25                                  segment code use32 class=code
    26                                      start:
    27                                          ; read from console a
    28 00000000 68[00000000]                    push dword a
    29 00000005 68[08000000]                    push dword format
    30 0000000A FF15[00000000]                  call [scanf]
    31 00000010 83C408                          add esp, 4*2
    32 00000013 8B1D[00000000]                  mov ebx, [a] ; ebx = a
    33                                          
    34                                          ; read from console b
    35 00000019 68[04000000]                    push dword b
    36 0000001E 68[08000000]                    push dword format
    37 00000023 FF15[00000000]                  call [scanf]
    38 00000029 83C408                          add esp, 4*2 
    39 0000002C 8B0D[04000000]                  mov ecx, [b] ; ecx = b
    40                                          
    41                                          ; divide a and b
    42 00000032 89D8                            mov eax, ebx ; eax = a
    43 00000034 BA00000000                      mov edx, 0 ; edx:eax = a 
    44 00000039 F7F9                            idiv ecx ; eax = a/b
    45                                          
    46 0000003B A3[2D000000]                    mov [result], eax ; result = a/b
    47                                          
    48                                          ; print result
    49 00000040 FF35[2D000000]                  push dword [result]
    50 00000046 68[0B000000]                    push dword msg1
    51 0000004B FF15[00000000]                  call [printf]
    52 00000051 83C408                          add esp, 4*2
    53                                          
    54                                          
    55                                          
    56                                          
    57 00000054 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    58 00000056 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
