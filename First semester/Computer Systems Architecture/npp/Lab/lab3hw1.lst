     1                                  ;2/(a+b*c-9)+e-d
     2                                  ; a,b,c-byte; d-doubleword; e-qword
     3                                  ;unsigned
     4                                  bits 32 ; assembling for the 32 bits architecture
     5                                  
     6                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     7                                  global start        
     8                                  
     9                                  ; declare external functions needed by our program
    10                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    11                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    12                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16 00000000 05                          a db 5
    17 00000001 09                          b db 9
    18 00000002 08                          c db 8
    19 00000003 3B000000                    d dd 59
    20 00000007 4602000000000000            e dq 582
    21 0000000F 00000000                    x dd 0
    22                                  segment code use32 class=code
    23                                      start: ;2/(a+b*c-9)+e-d
    24                                          ;b*c (byte*byte)
    25 00000000 A0[01000000]                    mov AL, [b]
    26 00000005 F625[02000000]                  mul byte[c] ; AX=AL*c=b*c=72
    27 0000000B 6689C3                          mov BX, AX ; BX=b*c
    28                                          
    29                                          ;a+b*c (byte+word)
    30 0000000E A0[00000000]                    mov AL, [a]
    31 00000013 B400                            mov AH, 0 ; AX=a 
    32 00000015 6601D8                          add AX, BX ; AX=AX+BX=a+b*c=77
    33                                          
    34                                          ;a+b*c-9 (word-constant)
    35 00000018 6683E809                        sub AX, 9 ; AX=AX-9=a+b*c-9=68
    36 0000001C 6689C3                          mov BX, AX ; BX=a+b*c-9
    37                                          
    38                                          ;2/(a+b*c-9) (constant/word)
    39 0000001F 66B80200                        mov AX, 2
    40 00000023 66BA0000                        mov DX, 0 ; DX:AX=2
    41 00000027 66F7F3                          div BX ; AX=DX:AX/BX=0 ; DX=DX:AX%BX=2
    42                                          
    43                                          ;2/(a+b*c-9)+e (word+quadword)
    44 0000002A A1[03000000]                    mov EAX, [d]
    45                                          ; mov word[x], AX
    46                                          ; mov word[x+2], DX
    47                                          ; mov EAX, x
    48 0000002F BA00000000                      mov EDX, 0 ; EDX:EAX = 2/(a+b*c-9)
    49 00000034 8B0D[07000000]                  mov ECX, dword[e]
    50 0000003A 8B1D[0B000000]                  mov EBX, dword[e+4] ; EBX:ECX=e
    51 00000040 01C1                            add ECX, EAX ; ECX=ECX+EAX and set CF to 0 or 1
    52 00000042 11D3                            adc EBX, EDX; EBX=EDX+EBX+CF ; EBX:ECX=2/(a+b*c-9)+e=582
    53                                          
    54                                          ;2/(a+b*c-9)+e-d (quadword-doubleword)
    55 00000044 A1[03000000]                    mov EAX, [d]
    56 00000049 BA00000000                      mov EDX, 0 ; EDX:EAX=d 
    57 0000004E 29C1                            sub ECX, EAX ; ECX=ECX-EAX and set CF to 0 or 1
    58 00000050 19D3                            sbb EBX, EDX ; EBX=EBX-EDX-CF ; EBX:ECX=e-d=523
    59                                          
    60                                          
    61 00000052 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    62 00000054 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
